% This script will do some of the AfNI preprocessing for me, at least as I
% learn how to use AfNI.  I'm going to set it up to be a bit dumb
% initially, then modify it to work more flexibly later.
%
% A quick guide to the EPI filenames associated with different
% preprocessing steps:
% 1) *_preTshift.nii.gz: the first .nii file, generated by DICOM conversion
% 2) *_Tshift.nii.gz: the result of slice timing correction performed on
%       the *_preTshift.nii.gz files.  This file is then de-obliqued
%       & overwritten.
% 3) *_Tshift-LPI.nii.gz: this file is produced transiently when the
%       de-obliqued file is resampled to LPI space.
% 4) *.nii.gz: this file results from a Unix "mv" command that simply
%       changes the name of *_Tshift-LPI.nii.gz.
% 5) *_Mean.nii.gz: the mean epi taken from the first set of epis obtained
%       during the experiment.
% 6) *_Mask.nii.gz: the epi mask derived from the mean epi.
% 7) *_CoReg.nii.gz: after *.nii.gz and *_Mean.nii.gz files are produced,
%       this file results from the realignment of the epis.
% 8) *_Smooth.nii.gz: coregistered files are then smoothed to generate 
%       this file type.
%
% Ancillary EPI-related files:
% 1) *_epiparams.mat: a mat-file containing the header-extracted number of
%       slices, number of time points collected, and the TR
% 2) *_tpattern.txt: a text file with the calculated slice offset timing
% 3) *_1D.txt: the file containing subject movement parameters
% 4) *_MD1D.txt: contains the maximal displacment related to subject
%       movement at each time point
% 5) *_outcount.txt: the number of outlier voxels in the automasked EPI
%       volume at each time point
% 6) *_qual.txt: the correlation of each EPI volume with the 
% 7) *_datacheck.jpg: images containing the *_outcount.txt, *_qual.txt, and
%       *_1D.txt timecourses --> essentially, a data quality image file
%
% A quick guide to the anatomical files:
% 1) *_mprage.nii.gz: the first .nii file, generated by DICOM conversion
% 2) *_mprage-LPI.nii.gz: a transient file that overwrites *_mprage.nii.gz
% 3) *_mprage_Cut.nii.gz: identical to the _mprage.nii.gz file, EXCEPT that
%       the file holds only a subset (typically 80-240) of the slices
% 4) *_mprage_Cut-LPI.nii.gz: again, a transient file that overwrites its
%       parent file
% 5) *_mprage_AlignEpi.nii.gz: this file holds the anatomical image that is
%       aligned to the mean epi
% 6) *_mprage_MNI.nii.gz: the normalized version of the AlignEpi.nii.gz 
%       anatomical file.
%
% Ancillary anatomical files:
% 1) *_mprage_Cut_1D.txt: holds a transformation matrix that aligns the
%       *_mprage_Cut.nii.gz file to the epis
% 2) *_flirt.txt: contains the linear transformation matching the subject's
%       EPI-aligned anatomical to the MNI template.
% 3) *_fnirt.nii.gz: contains the nonlinear transformation matching the
%       subject's EPI-aligned anatomical to the MNI template.


% format compact;
subs = 'Sub11';
sessions = 2:4;
baseSess = 1;

main_dir = '/home/sshankar/Categorization/';
script_dir = [main_dir, 'Scripts/'];
data_dir = [main_dir 'Data/Imaging/'];
template_dir = [main_dir, 'Templates/'];
% addpath(script_dir, [script_dir 'Nifti_Functions/']);

rest_len = 230; %325; for all sessions before Sub03 Session_1
task_len = 300; %[435 435 435 389 390]; % 435 for Sessions 1-3 for Sub02, 389 for Session 4, 390 for Session 5 and session_1_old_protocol of Sub03; 300 for Sub03 Session_1 onwards
TR = 1800; %1370; for all sessions before Sub03 Session_1
numSlices = 32; %24; for all sessions before Sub03 Session_1

for sessId = 1:length(sessions)
    subj_dir = [data_dir subs '/Session_' num2str(sessions(sessId)) '/'];

    % First convert dicoms to Nifti format
    dicom_dir = [subj_dir 'DICOMS/'];
    nifti_dir = [subj_dir 'NIFTIS/'];

    cd(dicom_dir)
    currdir = pwd;
    diary([subj_dir subs '_diary' date]);

    % Convert anatomical dicoms
    if ~isempty(dir([dicom_dir 't1_mprage/']))
        anat_dir = [dicom_dir 't1_mprage/'];
        anat_prefix = [subs '_mprage.nii.gz'];
        cd(anat_dir);

        command = ['to3d -anat -datum float -prefix ' anat_prefix ' *.dcm']
        system(command)
        command = ['3drefit -deoblique -xorigin cen -yorigin cen -zorigin cen ' ...
                    anat_prefix] %#ok<*NOPTS>
        system(command)
        command = ['3dresample -orient LPI -prefix ' anat_prefix(1:end-7) ...
                    '-LPI.nii.gz -inset ' anat_prefix]
        system(command)

        system(['mv ' anat_prefix(1:end-7) '-LPI.nii.gz ' anat_prefix])
        system(['mv ' anat_prefix ' ' nifti_dir])
    end

    % Next convert EPIs to Nifti format
    cd(dicom_dir);
    func_dirs = dir('EPI*');
    first_task_epi = [];

    for fdi = 1:length(func_dirs)
        f_dir = func_dirs(fdi).name;
        if ~isempty(strfind(f_dir,'Rest'))
            numIm = rest_len;
        else
            numIm = task_len; % task_len(sessions(sessId)); % Use this when each session had a different task EPI length
        end
        cd(f_dir);
        
        epi_prefix = f_dir; 
        epi_prefix1 = [epi_prefix '_preTshift'];
        sprintf('numSlices %d', numSlices)
        sprintf('numIm %d', numIm)
        sprintf('TR %d', TR)

        command = ['to3d -epan -skip_outliers -assume_dicom_mosaic -datum float '...
                    '-time:zt ' num2str(numSlices) ' ' num2str(numIm) ' ' num2str(TR) ' seq-z '... %' alt+z2 '...
                    '-prefix ' epi_prefix '.nii.gz' ' *.dcm']
        system(command)

        epi_tshift = [epi_prefix '_Tshift'];
        command = ['3dTshift -TR ' num2str(TR) 'ms -ignore 0 -tpattern seq-z -verbose '...
                    '-prefix ' epi_tshift '.nii.gz ' epi_prefix '.nii.gz']
        system(command)
        system(['mv ' epi_tshift '.nii.gz ' epi_prefix '.nii.gz'])

        command = ['3drefit -deoblique -xorigin cen -yorigin cen -zorigin cen ' ...
                    epi_prefix '.nii.gz']
        system(command)
        
        command = ['3dresample -orient LPI -prefix ' epi_prefix ...
                   '-LPI.nii.gz -inset ' epi_prefix '.nii.gz']
        system(command);
        
        system(['mv ' epi_prefix '-LPI.nii.gz ' epi_prefix '.nii.gz'])
        system(['mv ' epi_prefix '.nii.gz ' nifti_dir])
        cd ..

        if sessions(sessId) == baseSess && isempty(first_task_epi) && isempty(strfind(f_dir,'Rest'))
            first_task_epi = epi_prefix;
        end
    end

    % Generate mean epi for the first set of epis
    if sessions(sessId) == baseSess
        cd(nifti_dir);
        command = ['3dTstat -prefix ' subs '_Mean.nii.gz ' ...
                       first_task_epi '.nii.gz']
        system(command)
        command = ['3dAutomask -prefix ' subs '_Mask.nii.gz ' ...
                       subs '_Mean.nii.gz']
        system(command)
    end

    % Realign EPI images.  Note that 3dvolreg apparently includes an option
    % (-tshift) that takes care of slice timing offsets
    %
    % Problem: ++ WARNING: -tshift used on a dataset with no time-offsets!
    % Solution (attempt): use 3dTshift directly PRIOR to de-obliquing
    cd(nifti_dir);
    d_fepis = dir('*Task*nii.gz');
    
    if sessions(sessId) == baseSess
        mean_prefix = [subs '_Mean.nii.gz'];
    else
        mean_prefix = [data_dir subs '/Session_' num2str(baseSess) '/NIFTIS/' subs '_Mean.nii.gz'];
    end
    
    for l1 = 1:length(d_fepis)
        fepi_prefix = d_fepis(l1).name(1:end-7);
        
        % Default is Fourier alignment - most accurate, apparently
        command = ['3dvolreg -twopass -twodup -verbose -base ''' mean_prefix ...
            ''' -maxdisp1D ' fepi_prefix '_MD1D.txt -1Dfile ' fepi_prefix ...
            '_1D.txt -prefix ' fepi_prefix '_CoReg.nii.gz ' d_fepis(l1).name]
        system(command)
    end

    % Get some quality check parameters
    cd(nifti_dir)
    d_coreg = dir('*CoReg.nii.gz');
    for dci = 1:length(d_coreg)
        fepi_coreg_file = d_coreg(dci).name;
        coreg_prefix = fepi_coreg_file(1:end-13);
        fepi_outcount_file = [coreg_prefix '_outcount.txt'];
        fepi_qual_file = [coreg_prefix '_qual.txt'];
        command = ['3dToutcount -automask -range ' fepi_coreg_file ' > ' fepi_outcount_file]
        system(command)
        command = ['3dTqual -automask -range ' fepi_coreg_file ' > ' fepi_qual_file]
        system(command)

    end

    % Now gather all quality data for display
    d_coreg = dir('*CoReg.nii.gz');
    for dci = 1:length(d_coreg)
        fepi_coreg_file = d_coreg(dci).name;
        coreg_prefix = fepi_coreg_file(1:end-13);
        fepi_outcount_file = [coreg_prefix '_outcount.txt'];
        fepi_qual_file = [coreg_prefix '_qual.txt'];
        fepi_mvmt_file = [coreg_prefix '_1D.txt'];
        datacheck.outcount = load(fepi_outcount_file);
        datacheck.qual = load(fepi_qual_file);
        datacheck.mvmt = load(fepi_mvmt_file);
        figure;
        sizexaxis = 0.55;
        s = subplot(4,1,1);
        plot(datacheck.outcount);
        s_posn = get(s,'Position');
        s_posn(3) = sizexaxis;
        set(s,'XLim',[1 size(datacheck.outcount,1)], 'Position', s_posn);
        ylabel('Outlier Count');
        title(['Subject ' subs ' ' coreg_prefix]);
        s = subplot(4,1,2);
        plot(datacheck.qual);
        s_posn = get(s,'Position');
        s_posn(3) = sizexaxis;
        set(s,'XLim',[1 size(datacheck.qual,1)], 'Position', s_posn);
        ylabel('1-Corr: Median');
        s = subplot(4,1,3);
        s_posn = get(s,'Position');
        s_posn(3) = sizexaxis;
        plot(datacheck.mvmt(:,1:3));
        set(s,'XLim',[1 size(datacheck.mvmt,1)], 'Position', s_posn);
        ylabel('Rotation (deg)');
        legend('Roll', 'Pitch', 'Yaw', 'Location', 'BestOutside');
        s = subplot(4,1,4);
        plot(datacheck.mvmt(:,4:6));
        s_posn = get(s,'Position');
        s_posn(3) = sizexaxis;
        set(s,'XLim',[1 size(datacheck.mvmt,1)], 'Position', s_posn);
        xlabel('Time');
        ylabel('Translation (mm)');
        legend('Superior', 'Left', 'Posterior', 'Location', 'BestOutside');
        orient('portrait');
        print('-djpeg99', [coreg_prefix '_datacheck.jpg']);
    end

    % Smooth EPI images
    cd(nifti_dir)
    d_fepis = dir('*CoReg.nii.gz');
    for l1 = 1:length(d_fepis)
        fepi_prefix = d_fepis(l1).name(1:end-13);
        fepi_coreg_file = d_fepis(l1).name;
        command = ['3dmerge -doall -1blur_fwhm 5 -prefix ' fepi_prefix ...
            '_Smooth.nii.gz ' fepi_coreg_file];
        system(command);
    end

    % Now align anatomical images with functionals -- ie. put anatomicals in
    % same "space" as the functionals.

    % NB: Since functionals from sessions 2 & 3 may be aligned with
    % functionals from session 1, and those functionals should already have had
    % the anatomical alignment performed, this step should only need to take
    % place for session 1 OR if session 1 is *not* used as a reference.
    cd(nifti_dir)
    if sessions(sessId) == baseSess 
        anat_prefix = [subs '_mprage'];
        anat_cut_filename = [anat_prefix, '_Cut.nii.gz'];
        anat_align_filename = [anat_prefix, '_AlignEpi.nii.gz'];

        command = ['3dZcutup -keep 80 240 -prefix ' anat_prefix '_Cut.nii.gz ' ...
                    anat_prefix '.nii.gz'];
        system(command);
        command = ['3drefit -deoblique -xorigin cen -yorigin cen -zorigin cen ' ...
                    anat_prefix '_Cut.nii.gz'];
        system(command);
        command = ['3dresample -orient LPI -prefix ' anat_prefix ...
                    '_Cut_LPI.nii.gz -inset ' anat_prefix '_Cut.nii.gz'];
        system(command);
        system(['mv ' anat_prefix '_Cut_LPI.nii.gz ' anat_prefix '_Cut.nii.gz']);

        command = ['align_epi_anat.py -anat ' anat_prefix '_Cut.nii.gz ' ...
                       '-epi ' subs '_Mean.nii.gz -epi_base 5 -giant_move'];
        system(command)
        system('rename Cut.nii.gz_al Giant_AlignEpi *Cut.nii.gz_al*');

        % Now normalize realigned anatomical to the MNI template
        prenorm_prefix = [subs '_mprage_Giant_AlignEpi'];
        prenorm_filename = [prenorm_prefix '.nii.gz'];
        norm_prefix = [subs '_mprage_Giant_MNI'];
        norm_filename = [norm_prefix '.nii.gz'];

        mni_template = [template_dir 'MNI-Brain.nii.gz'];
        omat_file = [subs '_flirt.txt'];
        command = ['flirt -ref ' mni_template ' -in ' prenorm_filename ...
                    ' -omat ' omat_file];
        system(command)
        fnirt_file = [subs '_fnirt.nii.gz'];
        config_file = [template_dir 'MNI-Brain.cnf'];
        command = ['fnirt --in=' prenorm_filename ' --aff=' omat_file ...
                    ' --cout=' fnirt_file ' --config=' config_file];
        system(command)
        command = ['applywarp --ref=' mni_template ' --in=' prenorm_filename ...
                    ' --warp=' fnirt_file ' --out=' norm_filename];
        system(command)
    end
end

diary off